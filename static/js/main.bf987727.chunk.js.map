{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","searchInputValue","type","value","onChange","App","props","handleSearchInputChange","evt","setState","searchQuery","target","state","this","filter","toLowerCase","includes","fetch","then","response","json","data","filterMonsters","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAceA,G,MAVF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAG,+BAA4BF,EAAQG,GAApC,0BAAkEC,IAAI,YAC9E,4BAAMJ,EAAQK,MACd,2BAAKL,EAAQM,UCSDC,G,MAZE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACC,yBAAKP,UAAU,aAEbO,EAASC,KAAI,SAAAT,GACZ,OAAO,kBAAC,EAAD,CAAMU,IAAMV,EAAQG,GAAKH,QAAUA,UCGhCW,G,MAVG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,iBAA9B,OACjB,2BACCC,KAAK,SACLd,UAAU,SACVW,YAAcA,EACdI,MAAQF,EACRG,SAAWJ,MCwCEK,G,kBA1Cd,WAAaC,GAAQ,IAAD,8BACnB,4CAAMA,KAQPC,wBAA0B,SAAAC,GACzB,EAAKC,SAAS,CAAEC,YAAaF,EAAIG,OAAOR,SAPxC,EAAKS,MAAQ,CACZjB,SAAU,GACVe,YAAa,IALK,E,8EAaD,IAAD,EACiBG,KAAKD,MAA/BjB,EADS,EACTA,SAAUe,EADD,EACCA,YAClB,OAAOf,EAASmB,QAAO,SAAA3B,GAAO,OAC7BA,EAAQK,KAAKuB,cAAcC,SAASN,EAAYK,oB,0CAI5B,IAAD,OACpBE,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKZ,SAAS,CAAEd,SAAU0B,S,+BAIzC,OACC,yBAAKjC,UAAU,OACd,gDAEA,kBAAC,EAAD,CACCW,YAAY,kBACZC,aAAea,KAAKN,wBACpBN,iBAAmBY,KAAKD,MAAMF,cAE/B,kBAAC,EAAD,CAAUf,SAAWkB,KAAKS,wB,GArCZC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.bf987727.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nconst Card = ({ monster }) => {\r\n\treturn (\r\n\t\t<div className=\"card-container\">\r\n\t\t\t<img src={ `https://robohash.org/${ monster.id }?set=set2&size=180x180` } alt=\"monster\"/>\r\n\t\t\t<h2>{ monster.name }</h2>\r\n\t\t\t<p>{ monster.email }</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nimport './card-list.styles.css'\r\n\r\nconst CardList = ({ monsters }) => {\r\n\treturn (\r\n\t\t<div className=\"card-list\">\r\n\t\t\t{\r\n\t\t\t\tmonsters.map(monster => {\r\n\t\t\t\t\treturn <Card key={ monster.id } monster={ monster }/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange, searchInputValue }) => (\r\n\t<input\r\n\t\ttype=\"search\"\r\n\t\tclassName=\"search\"\r\n\t\tplaceholder={ placeholder }\r\n\t\tvalue={ searchInputValue }\r\n\t\tonChange={ handleChange }\r\n\t/>\r\n);\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchQuery: '',\n\t\t};\n\t}\n\n\thandleSearchInputChange = evt => {\n\t\tthis.setState({ searchQuery: evt.target.value });\n\t};\n\n\tfilterMonsters () {\n\t\tconst { monsters, searchQuery } = this.state;\n\t\treturn monsters.filter(monster =>\n\t\t\tmonster.name.toLowerCase().includes(searchQuery.toLowerCase())\n\t\t);\n\t}\n\n\tcomponentDidMount () {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => this.setState({ monsters: data }));\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder=\"search monsters\"\n\t\t\t\t\thandleChange={ this.handleSearchInputChange }\n\t\t\t\t\tsearchInputValue={ this.state.searchQuery }\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={ this.filterMonsters() }/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}